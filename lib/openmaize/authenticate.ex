defmodule Openmaize.Authenticate do
  @moduledoc """
  Authenticate the current user, using sessions.

  ## Options

  There is one option:

    * db_module - the module that is used to query the database
      * in most cases, this will be generated by `mix openmaize.gen.ectodb` and will be called MyApp.OpenmaizeEcto
      * if you implement your own database module, it needs to implement the Openmaize.Database behaviour

  ## Examples using Phoenix

  Add the following line to the pipeline in the `web/router.ex` file:

      plug Openmaize.Authenticate, db_module: MyApp.OpenmaizeEcto

  """

  import Plug.Conn

  @behaviour Plug

  def init(opts) do
    Keyword.get opts, :db_module
  end

  @doc """
  Authenticate the current user using sessions.
  """
  def call(_, nil) do
    raise ArgumentError, "You need to set the db_module value for Openmaize.Authenticate"
  end
  def call(conn, db_module) do
    get_session(conn, :user_id)
    |> db_module.find_user_byid()
    |> set_current_user(conn)
  end

  defp set_current_user({:ok, user}, conn), do: assign(conn, :current_user, user)
  defp set_current_user({:error, _}, conn), do: assign(conn, :current_user, nil)
  defp set_current_user(_, conn), do: assign(conn, :current_user, nil)
end
